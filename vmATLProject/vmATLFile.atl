-- @path mainVM=/VendingMachineUAQ/model/vendingMachineUAQ.ecore
-- @path refinedVM=/RefinedVendingMachineProject/model/RefinedVendingMachine.ecore

module vmATLFile;
create OUT : refinedVM from IN : mainVM;


-- Rule to transform Location to Location
rule LocationToLocation {
    from
        src : mainVM!Location
    to
        tgt : refinedVM!Location (
            name <- src.name,
            latitude <- src.lat,
            longitude <- src.long
        )
}

-- Rule to transform Inventory to Inventory
rule InventoryToInventory {
    from
        src : mainVM!Inventory
    to
        tgt : refinedVM!Inventory (
            id <- src.id,
            maxCapacity <- src.capacity,
            lastRestockedDate <- src.lastRestocked,
            availableSlots <- src.availableSlots,
            productGroups <- src.itemGroups
        )
}

-- Rule to transform VendingMachine to VendingMachine
rule VendingMachineToVendingMachine {
    from
        src : mainVM!VendingMachine
    to
        tgt : refinedVM!VendingMachine (
            id <- src.id,
            name <- src.name,
            location <- src.location,
            state <- src.state,
            keypad <- src.keypad,
            paymentModule <- src.paymentProcessor,
            dispenser <- src.itemProcessor,
            inventory <- src.inventory
        )
}

-- Rule to transform ItemGroup to ProductGroup
rule ItemGroupToProductGroup {
    from
        src : mainVM!ItemGroup
    to
        tgt : refinedVM!ProductGroup (
            id <- src.id,
            name <- src.name,
            stock <- src.quantity,
            price <- src.price,
            imageUrl <- src.image,
            products <- src.items
        )
}

-- Rule to transform Item to Product
rule ItemToProduct {
    from
        src : mainVM!Item
    to
        tgt : refinedVM!Product (
            id <- src.id,
            expirationDate <- src.expiry,
            group <- src.itemGroup
        )
}

-- Rule to transform PaymentProcessor to PaymentModule
rule PaymentProcessorToPaymentModule {
    from
        src : mainVM!PaymentProcessor
    to
        tgt : refinedVM!PaymentModule (
            amount <- src.amound,
            paymentType <- src.paymentMethod,
            state <- src.state,
            operation <- src.operation
        )
}


-- Rule to transform State to MachineState
rule StateToMachineState {
    from
        src : mainVM!State
    to
        tgt : refinedVM!MachineState (
            stage <- src.stage
        )
}


-- Rule to transform Keypad to InputDevice
rule KeypadToInputDevice {
    from
        src : mainVM!Keypad
    to
        tgt : refinedVM!InputDevice (
            input <- src.input,
            operation <- src.operation
        )
}

-- Updated Rule: ItemProcessor to Dispenser
rule ItemProcessorToDispenser {
    from
        src : mainVM!ItemProcessor
    to
        tgt : refinedVM!Dispenser (
            state <- src.state,
            operation <- src.operation
        )
}