/**
 */
package vendingMachineUAQ.util;

import java.util.Map;

import org.eclipse.emf.common.util.DiagnosticChain;
import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.EObjectValidator;

import vendingMachineUAQ.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Validator</b> for the model.
 * <!-- end-user-doc -->
 * @see vendingMachineUAQ.VendingMachineUAQPackage
 * @generated
 */
public class VendingMachineUAQValidator extends EObjectValidator {
	/**
	 * The cached model package
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final VendingMachineUAQValidator INSTANCE = new VendingMachineUAQValidator();

	/**
	 * A constant for the {@link org.eclipse.emf.common.util.Diagnostic#getSource() source} of diagnostic {@link org.eclipse.emf.common.util.Diagnostic#getCode() codes} from this package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see org.eclipse.emf.common.util.Diagnostic#getSource()
	 * @see org.eclipse.emf.common.util.Diagnostic#getCode()
	 * @generated
	 */
	public static final String DIAGNOSTIC_SOURCE = "vendingMachineUAQ";

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Unique Processor States' of 'Vending Machine'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VENDING_MACHINE__UNIQUE_PROCESSOR_STATES = 1;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Valid Name' of 'Vending Machine'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VENDING_MACHINE__VALID_NAME = 2;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Valid Location Reference' of 'Vending Machine'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int VENDING_MACHINE__VALID_LOCATION_REFERENCE = 3;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Valid Latitude' of 'Location'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LOCATION__VALID_LATITUDE = 4;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Valid Longitude' of 'Location'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LOCATION__VALID_LONGITUDE = 5;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Name Not Empty' of 'Location'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int LOCATION__NAME_NOT_EMPTY = 6;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Valid Input' of 'Keypad'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int KEYPAD__VALID_INPUT = 7;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Valid Operation' of 'Has Operation'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int HAS_OPERATION__VALID_OPERATION = 8;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Valid Stage Transition' of 'State'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int STATE__VALID_STAGE_TRANSITION = 9;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Valid Amount' of 'Payment Processor'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYMENT_PROCESSOR__VALID_AMOUNT = 10;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Valid State For Payment' of 'Payment Processor'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int PAYMENT_PROCESSOR__VALID_STATE_FOR_PAYMENT = 11;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Valid Image Format' of 'Item Group'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ITEM_GROUP__VALID_IMAGE_FORMAT = 12;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Positive Quantity' of 'Item Group'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ITEM_GROUP__POSITIVE_QUANTITY = 13;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Valid Price' of 'Item Group'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ITEM_GROUP__VALID_PRICE = 14;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Unique Item Ids' of 'Item Group'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ITEM_GROUP__UNIQUE_ITEM_IDS = 15;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Quantity Matches Items' of 'Item Group'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ITEM_GROUP__QUANTITY_MATCHES_ITEMS = 16;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Positive Id' of 'Item'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int ITEM__POSITIVE_ID = 17;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Unique Item Group Ids' of 'Inventory'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INVENTORY__UNIQUE_ITEM_GROUP_IDS = 18;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Not Over Capacity' of 'Inventory'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INVENTORY__NOT_OVER_CAPACITY = 19;

	/**
	 * The {@link org.eclipse.emf.common.util.Diagnostic#getCode() code} for constraint 'Valid Capacity' of 'Inventory'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final int INVENTORY__VALID_CAPACITY = 20;

	/**
	 * A constant with a fixed name that can be used as the base value for additional hand written constants.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static final int GENERATED_DIAGNOSTIC_CODE_COUNT = 20;

	/**
	 * A constant with a fixed name that can be used as the base value for additional hand written constants in a derived class.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static final int DIAGNOSTIC_CODE_COUNT = GENERATED_DIAGNOSTIC_CODE_COUNT;

	/**
	 * Delegates evaluation of the given invariant expression against the object in the given context.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static boolean validate(EClass eClass, EObject eObject, DiagnosticChain diagnostics,
			Map<Object, Object> context, String validationDelegate, EOperation invariant, String expression,
			int severity, String source, int code) {
		return EObjectValidator.validate(eClass, eObject, diagnostics, context, validationDelegate, invariant,
				expression, severity, source, code);
	}

	/**
	 * Creates an instance of the switch.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VendingMachineUAQValidator() {
		super();
	}

	/**
	 * Returns the package of this validator switch.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EPackage getEPackage() {
		return VendingMachineUAQPackage.eINSTANCE;
	}

	/**
	 * Calls <code>validateXXX</code> for the corresponding classifier of the model.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected boolean validate(int classifierID, Object value, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		switch (classifierID) {
		case VendingMachineUAQPackage.NAMED_ENTITY:
			return validateNamedEntity((NamedEntity) value, diagnostics, context);
		case VendingMachineUAQPackage.VENDING_MACHINE:
			return validateVendingMachine((VendingMachine) value, diagnostics, context);
		case VendingMachineUAQPackage.LOCATION:
			return validateLocation((Location) value, diagnostics, context);
		case VendingMachineUAQPackage.HAS_ID:
			return validateHasId((HasId) value, diagnostics, context);
		case VendingMachineUAQPackage.KEYPAD:
			return validateKeypad((Keypad) value, diagnostics, context);
		case VendingMachineUAQPackage.HAS_OPERATION:
			return validateHasOperation((HasOperation) value, diagnostics, context);
		case VendingMachineUAQPackage.ITEM_PROCESSOR:
			return validateItemProcessor((ItemProcessor) value, diagnostics, context);
		case VendingMachineUAQPackage.STATE:
			return validateState((State) value, diagnostics, context);
		case VendingMachineUAQPackage.PAYMENT_PROCESSOR:
			return validatePaymentProcessor((PaymentProcessor) value, diagnostics, context);
		case VendingMachineUAQPackage.ITEM_GROUP:
			return validateItemGroup((ItemGroup) value, diagnostics, context);
		case VendingMachineUAQPackage.ITEM:
			return validateItem((Item) value, diagnostics, context);
		case VendingMachineUAQPackage.INVENTORY:
			return validateInventory((Inventory) value, diagnostics, context);
		case VendingMachineUAQPackage.STATE_OPERATIONS:
			return validateSTATE_OPERATIONS((STATE_OPERATIONS) value, diagnostics, context);
		case VendingMachineUAQPackage.PAYMENT_METHODS:
			return validatePAYMENT_METHODS((PAYMENT_METHODS) value, diagnostics, context);
		case VendingMachineUAQPackage.STATES:
			return validateSTATES((STATES) value, diagnostics, context);
		default:
			return true;
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateNamedEntity(NamedEntity namedEntity, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return validate_EveryDefaultConstraint(namedEntity, diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVendingMachine(VendingMachine vendingMachine, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(vendingMachine, diagnostics, context))
			return false;
		boolean result = validate_EveryMultiplicityConforms(vendingMachine, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryDataValueConforms(vendingMachine, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryReferenceIsContained(vendingMachine, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryBidirectionalReferenceIsPaired(vendingMachine, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryProxyResolves(vendingMachine, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_UniqueID(vendingMachine, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryKeyUnique(vendingMachine, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryMapEntryUnique(vendingMachine, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateVendingMachine_uniqueProcessorStates(vendingMachine, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateVendingMachine_validName(vendingMachine, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateVendingMachine_validLocationReference(vendingMachine, diagnostics, context);
		return result;
	}

	/**
	 * Validates the uniqueProcessorStates constraint of '<em>Vending Machine</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVendingMachine_uniqueProcessorStates(VendingMachine vendingMachine,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vendingMachine.uniqueProcessorStates(diagnostics, context);
	}

	/**
	 * Validates the validName constraint of '<em>Vending Machine</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVendingMachine_validName(VendingMachine vendingMachine, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return vendingMachine.validName(diagnostics, context);
	}

	/**
	 * Validates the validLocationReference constraint of '<em>Vending Machine</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateVendingMachine_validLocationReference(VendingMachine vendingMachine,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return vendingMachine.validLocationReference(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLocation(Location location, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(location, diagnostics, context))
			return false;
		boolean result = validate_EveryMultiplicityConforms(location, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryDataValueConforms(location, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryReferenceIsContained(location, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryBidirectionalReferenceIsPaired(location, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryProxyResolves(location, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_UniqueID(location, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryKeyUnique(location, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryMapEntryUnique(location, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateLocation_validLatitude(location, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateLocation_validLongitude(location, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateLocation_nameNotEmpty(location, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validLatitude constraint of '<em>Location</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLocation_validLatitude(Location location, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return location.validLatitude(diagnostics, context);
	}

	/**
	 * Validates the validLongitude constraint of '<em>Location</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLocation_validLongitude(Location location, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return location.validLongitude(diagnostics, context);
	}

	/**
	 * Validates the nameNotEmpty constraint of '<em>Location</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateLocation_nameNotEmpty(Location location, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return location.nameNotEmpty(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHasId(HasId hasId, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return validate_EveryDefaultConstraint(hasId, diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateKeypad(Keypad keypad, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(keypad, diagnostics, context))
			return false;
		boolean result = validate_EveryMultiplicityConforms(keypad, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryDataValueConforms(keypad, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryReferenceIsContained(keypad, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryBidirectionalReferenceIsPaired(keypad, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryProxyResolves(keypad, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_UniqueID(keypad, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryKeyUnique(keypad, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryMapEntryUnique(keypad, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateHasOperation_validOperation(keypad, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateKeypad_validInput(keypad, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validInput constraint of '<em>Keypad</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateKeypad_validInput(Keypad keypad, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return keypad.validInput(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHasOperation(HasOperation hasOperation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(hasOperation, diagnostics, context))
			return false;
		boolean result = validate_EveryMultiplicityConforms(hasOperation, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryDataValueConforms(hasOperation, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryReferenceIsContained(hasOperation, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryBidirectionalReferenceIsPaired(hasOperation, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryProxyResolves(hasOperation, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_UniqueID(hasOperation, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryKeyUnique(hasOperation, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryMapEntryUnique(hasOperation, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateHasOperation_validOperation(hasOperation, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validOperation constraint of '<em>Has Operation</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateHasOperation_validOperation(HasOperation hasOperation, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return hasOperation.validOperation(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateItemProcessor(ItemProcessor itemProcessor, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(itemProcessor, diagnostics, context))
			return false;
		boolean result = validate_EveryMultiplicityConforms(itemProcessor, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryDataValueConforms(itemProcessor, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryReferenceIsContained(itemProcessor, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryBidirectionalReferenceIsPaired(itemProcessor, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryProxyResolves(itemProcessor, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_UniqueID(itemProcessor, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryKeyUnique(itemProcessor, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryMapEntryUnique(itemProcessor, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateHasOperation_validOperation(itemProcessor, diagnostics, context);
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateState(State state, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(state, diagnostics, context))
			return false;
		boolean result = validate_EveryMultiplicityConforms(state, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryDataValueConforms(state, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryReferenceIsContained(state, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryBidirectionalReferenceIsPaired(state, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryProxyResolves(state, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_UniqueID(state, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryKeyUnique(state, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryMapEntryUnique(state, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateState_validStageTransition(state, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validStageTransition constraint of '<em>State</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateState_validStageTransition(State state, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return state.validStageTransition(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePaymentProcessor(PaymentProcessor paymentProcessor, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		if (!validate_NoCircularContainment(paymentProcessor, diagnostics, context))
			return false;
		boolean result = validate_EveryMultiplicityConforms(paymentProcessor, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryDataValueConforms(paymentProcessor, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryReferenceIsContained(paymentProcessor, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryBidirectionalReferenceIsPaired(paymentProcessor, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryProxyResolves(paymentProcessor, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_UniqueID(paymentProcessor, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryKeyUnique(paymentProcessor, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryMapEntryUnique(paymentProcessor, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateHasOperation_validOperation(paymentProcessor, diagnostics, context);
		if (result || diagnostics != null)
			result &= validatePaymentProcessor_validAmount(paymentProcessor, diagnostics, context);
		if (result || diagnostics != null)
			result &= validatePaymentProcessor_validStateForPayment(paymentProcessor, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validAmount constraint of '<em>Payment Processor</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePaymentProcessor_validAmount(PaymentProcessor paymentProcessor, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return paymentProcessor.validAmount(diagnostics, context);
	}

	/**
	 * Validates the validStateForPayment constraint of '<em>Payment Processor</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePaymentProcessor_validStateForPayment(PaymentProcessor paymentProcessor,
			DiagnosticChain diagnostics, Map<Object, Object> context) {
		return paymentProcessor.validStateForPayment(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateItemGroup(ItemGroup itemGroup, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(itemGroup, diagnostics, context))
			return false;
		boolean result = validate_EveryMultiplicityConforms(itemGroup, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryDataValueConforms(itemGroup, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryReferenceIsContained(itemGroup, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryBidirectionalReferenceIsPaired(itemGroup, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryProxyResolves(itemGroup, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_UniqueID(itemGroup, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryKeyUnique(itemGroup, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryMapEntryUnique(itemGroup, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateItemGroup_validImageFormat(itemGroup, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateItemGroup_positiveQuantity(itemGroup, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateItemGroup_validPrice(itemGroup, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateItemGroup_uniqueItemIds(itemGroup, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateItemGroup_quantityMatchesItems(itemGroup, diagnostics, context);
		return result;
	}

	/**
	 * Validates the validImageFormat constraint of '<em>Item Group</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateItemGroup_validImageFormat(ItemGroup itemGroup, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return itemGroup.validImageFormat(diagnostics, context);
	}

	/**
	 * Validates the positiveQuantity constraint of '<em>Item Group</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateItemGroup_positiveQuantity(ItemGroup itemGroup, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return itemGroup.positiveQuantity(diagnostics, context);
	}

	/**
	 * Validates the validPrice constraint of '<em>Item Group</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateItemGroup_validPrice(ItemGroup itemGroup, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return itemGroup.validPrice(diagnostics, context);
	}

	/**
	 * Validates the uniqueItemIds constraint of '<em>Item Group</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateItemGroup_uniqueItemIds(ItemGroup itemGroup, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return itemGroup.uniqueItemIds(diagnostics, context);
	}

	/**
	 * Validates the quantityMatchesItems constraint of '<em>Item Group</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateItemGroup_quantityMatchesItems(ItemGroup itemGroup, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return itemGroup.quantityMatchesItems(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateItem(Item item, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(item, diagnostics, context))
			return false;
		boolean result = validate_EveryMultiplicityConforms(item, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryDataValueConforms(item, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryReferenceIsContained(item, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryBidirectionalReferenceIsPaired(item, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryProxyResolves(item, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_UniqueID(item, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryKeyUnique(item, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryMapEntryUnique(item, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateItem_positiveId(item, diagnostics, context);
		return result;
	}

	/**
	 * Validates the positiveId constraint of '<em>Item</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateItem_positiveId(Item item, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return item.positiveId(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInventory(Inventory inventory, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (!validate_NoCircularContainment(inventory, diagnostics, context))
			return false;
		boolean result = validate_EveryMultiplicityConforms(inventory, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryDataValueConforms(inventory, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryReferenceIsContained(inventory, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryBidirectionalReferenceIsPaired(inventory, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryProxyResolves(inventory, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_UniqueID(inventory, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryKeyUnique(inventory, diagnostics, context);
		if (result || diagnostics != null)
			result &= validate_EveryMapEntryUnique(inventory, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateInventory_uniqueItemGroupIds(inventory, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateInventory_notOverCapacity(inventory, diagnostics, context);
		if (result || diagnostics != null)
			result &= validateInventory_validCapacity(inventory, diagnostics, context);
		return result;
	}

	/**
	 * Validates the uniqueItemGroupIds constraint of '<em>Inventory</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInventory_uniqueItemGroupIds(Inventory inventory, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return inventory.uniqueItemGroupIds(diagnostics, context);
	}

	/**
	 * Validates the notOverCapacity constraint of '<em>Inventory</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInventory_notOverCapacity(Inventory inventory, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return inventory.notOverCapacity(diagnostics, context);
	}

	/**
	 * Validates the validCapacity constraint of '<em>Inventory</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateInventory_validCapacity(Inventory inventory, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return inventory.validCapacity(diagnostics, context);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSTATE_OPERATIONS(STATE_OPERATIONS statE_OPERATIONS, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return true;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validatePAYMENT_METHODS(PAYMENT_METHODS paymenT_METHODS, DiagnosticChain diagnostics,
			Map<Object, Object> context) {
		return true;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateSTATES(STATES states, DiagnosticChain diagnostics, Map<Object, Object> context) {
		return true;
	}

	/**
	 * Returns the resource locator that will be used to fetch messages for this validator's diagnostics.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ResourceLocator getResourceLocator() {
		// TODO
		// Specialize this to return a resource locator for messages specific to this validator.
		// Ensure that you remove @generated or mark it @generated NOT
		return super.getResourceLocator();
	}

} //VendingMachineUAQValidator
