/**
 */
package vendingMachineUAQ.impl;

import java.lang.reflect.InvocationTargetException;
import java.util.Map;
import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.Diagnostic;
import org.eclipse.emf.common.util.DiagnosticChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import vendingMachineUAQ.STATES;
import vendingMachineUAQ.State;
import vendingMachineUAQ.VendingMachineUAQPackage;
import vendingMachineUAQ.util.VendingMachineUAQValidator;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>State</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link vendingMachineUAQ.impl.StateImpl#getStage <em>Stage</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StateImpl extends MinimalEObjectImpl.Container implements State {
	/**
	 * The default value of the '{@link #getStage() <em>Stage</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getStage()
	 * @generated
	 * @ordered
	 */
	protected static final STATES STAGE_EDEFAULT = STATES.SELECT_ITEM;

	/**
	 * The cached value of the '{@link #getStage() <em>Stage</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getStage()
	 * @generated
	 * @ordered
	 */
	protected STATES stage = STAGE_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return VendingMachineUAQPackage.Literals.STATE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public STATES getStage() {
		return stage;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setStage(STATES newStage) {
		STATES oldStage = stage;
		stage = newStage == null ? STAGE_EDEFAULT : newStage;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, VendingMachineUAQPackage.STATE__STAGE, oldStage,
					stage));
	}

	/**
	 * The cached validation expression for the '{@link #validStageTransition(org.eclipse.emf.common.util.DiagnosticChain, java.util.Map) <em>Valid Stage Transition</em>}' invariant operation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #validStageTransition(org.eclipse.emf.common.util.DiagnosticChain, java.util.Map)
	 * @generated
	 * @ordered
	 */
	protected static final String VALID_STAGE_TRANSITION_DIAGNOSTIC_CHAIN_MAP__EEXPRESSION = "\n"
			+ "\t\t\tlet validTransitions : Set(Tuple(from: STATES, to: STATES)) = Set{\n"
			+ "\t\t\t\tTuple{from = STATES::SELECT_ITEM, to = STATES::WAIT_FOR_PAYMENT},\n"
			+ "\t\t\t\tTuple{from = STATES::WAIT_FOR_PAYMENT, to = STATES::PROCESSING_PAYMENT},\n"
			+ "\t\t\t\tTuple{from = STATES::PROCESSING_PAYMENT, to = STATES::PROCESSING_ITEM},\n"
			+ "\t\t\t\tTuple{from = STATES::PROCESSING_ITEM, to = STATES::ITEM_DESPATCHED}\n" + "\t\t\t} in\n"
			+ "\t\t\tself.stage <> null and\n" + "\t\t\t(self.oclIsNew() or\n"
			+ "\t\t\tvalidTransitions->exists(t | t.from = self.stage@pre and t.to = self.stage))";

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean validStageTransition(DiagnosticChain diagnostics, Map<Object, Object> context) {
		return VendingMachineUAQValidator.validate(VendingMachineUAQPackage.Literals.STATE, this, diagnostics, context,
				"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot",
				VendingMachineUAQPackage.Literals.STATE___VALID_STAGE_TRANSITION__DIAGNOSTICCHAIN_MAP,
				VALID_STAGE_TRANSITION_DIAGNOSTIC_CHAIN_MAP__EEXPRESSION, Diagnostic.ERROR,
				VendingMachineUAQValidator.DIAGNOSTIC_SOURCE, VendingMachineUAQValidator.STATE__VALID_STAGE_TRANSITION);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
		case VendingMachineUAQPackage.STATE__STAGE:
			return getStage();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
		case VendingMachineUAQPackage.STATE__STAGE:
			setStage((STATES) newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
		case VendingMachineUAQPackage.STATE__STAGE:
			setStage(STAGE_EDEFAULT);
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
		case VendingMachineUAQPackage.STATE__STAGE:
			return stage != STAGE_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	@SuppressWarnings("unchecked")
	public Object eInvoke(int operationID, EList<?> arguments) throws InvocationTargetException {
		switch (operationID) {
		case VendingMachineUAQPackage.STATE___VALID_STAGE_TRANSITION__DIAGNOSTICCHAIN_MAP:
			return validStageTransition((DiagnosticChain) arguments.get(0), (Map<Object, Object>) arguments.get(1));
		}
		return super.eInvoke(operationID, arguments);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy())
			return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (stage: ");
		result.append(stage);
		result.append(')');
		return result.toString();
	}

} //StateImpl
