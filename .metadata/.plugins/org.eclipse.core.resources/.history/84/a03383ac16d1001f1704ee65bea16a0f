/**
 */
package vendingMachineUAQ;

import java.util.Map;
import org.eclipse.emf.common.util.DiagnosticChain;
import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>State</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link vendingMachineUAQ.State#getStage <em>Stage</em>}</li>
 * </ul>
 *
 * @see vendingMachineUAQ.VendingMachineUAQPackage#getState()
 * @model annotation="http://www.eclipse.org/emf/2002/Ecore"
 * @generated
 */
public interface State extends EObject {
	/**
	 * Returns the value of the '<em><b>Stage</b></em>' attribute.
	 * The literals are from the enumeration {@link vendingMachineUAQ.STATES}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Stage</em>' attribute.
	 * @see vendingMachineUAQ.STATES
	 * @see #setStage(STATES)
	 * @see vendingMachineUAQ.VendingMachineUAQPackage#getState_Stage()
	 * @model required="true"
	 * @generated
	 */
	STATES getStage();

	/**
	 * Sets the value of the '{@link vendingMachineUAQ.State#getStage <em>Stage</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Stage</em>' attribute.
	 * @see vendingMachineUAQ.STATES
	 * @see #getStage()
	 * @generated
	 */
	void setStage(STATES value);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot body='\n\t\t\tlet validTransitions : Set(Tuple(from: STATES, to: STATES)) = Set{\n\t\t\t\tTuple{from = STATES::SELECT_ITEM, to = STATES::WAIT_FOR_PAYMENT},\n\t\t\t\tTuple{from = STATES::WAIT_FOR_PAYMENT, to = STATES::PROCESSING_PAYMENT},\n\t\t\t\tTuple{from = STATES::PROCESSING_PAYMENT, to = STATES::PROCESSING_ITEM},\n\t\t\t\tTuple{from = STATES::PROCESSING_ITEM, to = STATES::ITEM_DESPATCHED}\n\t\t\t} in\n\t\t\tself.stage &lt;&gt; null and\n\t\t\t(self.oclIsNew() or\n\t\t\tvalidTransitions-&gt;exists(t | t.from = self.stage@pre and t.to = self.stage))'"
	 * @generated
	 */
	boolean validStageTransition(DiagnosticChain diagnostics, Map<Object, Object> context);

} // State
